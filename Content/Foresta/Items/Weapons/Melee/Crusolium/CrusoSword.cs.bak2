using System;
using Crystals.Helpers;
using Humanizer;
using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Graphics;
using Terraria;
using Terraria.DataStructures;
using Terraria.GameContent.Creative;
using Terraria.ID;
using Terraria.Localization;
using Terraria.ModLoader;

namespace Crystals.Content.Foresta.Items.Weapons.Melee.Crusolium
{
    public class CrusoSword : ModItem
    {
        public override void SetStaticDefaults()
        {
            DisplayName.SetDefault("Cruso Sword");
            CreativeItemSacrificesCatalog.Instance.SacrificeCountNeededByItemId[Type] = 1;
            Tooltip.SetDefault("Every three hits of an enemy swings a powered-up swing");
        }

        public override void SetDefaults()
        {
            Item.damage = 23;
            Item.DamageType = DamageClass.Melee;
            Item.width = 40;
            Item.height = 40;
            Item.useTime = 40;
            Item.useAnimation = 40;
            Item.knockBack = 3;
            Item.value = 10000;
            Item.rare = ItemRarityID.Orange;
            Item.UseSound = SoundID.Item1;
            Item.autoReuse = true;
            Item.crit = 4;
            Item.useStyle = ItemUseStyleID.Swing;
            Item.shoot = ModContent.ProjectileType<CrusoSwordSwing>();
            Item.channel = true;
            Item.noUseGraphic = true;
            Item.noMelee = true;
        }

        int swingCount = 0;


        public override bool Shoot(Player player, EntitySource_ItemUse_WithAmmo source, Vector2 position,
            Vector2 velocity, int type, int damage, float knockback)
        {
            swingCount++;
            if (swingCount % 2 == 0)
            {
                player.GetModPlayer<CrusoSwordPlayer>().UpSwing = true;
            }

            return true;
        }


        public override void Update(ref float gravity, ref float maxFallSpeed)
        {
            maxFallSpeed = 0;
        }

        public override bool PreDrawInWorld(SpriteBatch spriteBatch, Color lightColor, Color alphaColor,
            ref float rotation, ref float scale,
            int whoAmI)
        {
            scale = 1.5f;
            if (Main.rand.NextFloat() < 0.12f)
            {
                Dust dust;
                Vector2 position = Item.position;
                dust = Main.dust[
                    Terraria.Dust.NewDust(position, Item.width, Item.height, 269, 0f, -10f, 0,
                        new Color(255, 255, 255),
                        1f)];
            }

            return true;
        }

        public override bool MeleePrefix()
        {
            return true;
        }

        class CrusoSwordSwing : ModProjectile
        {
            public override void SetStaticDefaults()
            {
                DisplayName.SetDefault("Cruso Sword");
            }

            public override void SetDefaults()
            {
                Projectile.friendly = true;
                Projectile.scale = 1f;
                Projectile.penetrate = -1;
                Projectile.ignoreWater = true;
                Projectile.tileCollide = false;
                Projectile.DamageType = DamageClass.Melee;

                Projectile.height = 32;
                Projectile.width = 27;
            }

            Vector2 startPoint;
            Vector2 startPointPowered;
            Vector2 startPointUp;

            float startPointRot;
            float startPointPoweredRot;
            float startPointUpRot;

            const float PiOver6 = MathHelper.PiOver4 / 1.5f;
            const float PiOver8 = MathHelper.PiOver4 / 2;
            const float PiOver3 = MathHelper.Pi / 3;

            float swingSpeed;
            float rotationFactor;
            float maxTime;
            float attackSpeed;
            float hitCount;

            bool poweredSwing = false;
            bool upSwing = false;

            public override bool ShouldUpdatePosition()
            {
                return false;
            }

            public override void OnSpawn(IEntitySource source)
            {
                Player player = Main.player[Projectile.owner];

                startPoint = Main.MouseWorld.RotatedBy(-PiOver3 * player.direction, player.Center);
                startPointUp = Main.MouseWorld.RotatedBy(MathHelper.PiOver4 * player.direction, player.Center);
                startPointPowered = Main.MouseWorld.RotatedBy(-MathHelper.Pi / 1.2f * player.direction, player.Center);

                if (Main.MouseWorld.X > player.Center.X)
                {
                    startPointRot = (startPoint - player.Center).ToRotation() + MathHelper.PiOver4;
                    startPointUpRot = (startPointUp - player.Center).ToRotation() + MathHelper.PiOver4;
                    startPointPoweredRot = (startPointPowered - player.Center).ToRotation() + MathHelper.PiOver4;
                }
                else
                {
                    startPointRot = (startPoint - player.Center).ToRotation() - MathHelper.PiOver4 + MathHelper.Pi;
                    startPointUpRot = (startPointUp - player.Center).ToRotation() - MathHelper.PiOver4 + MathHelper.Pi;
                    startPointPoweredRot = (startPointPowered - player.Center).ToRotation() - MathHelper.PiOver4 +
                                           MathHelper.Pi;
                }

                maxTime = player.GetModPlayer<CrusoSwordPlayer>().UpSwing ? 1.2f : 1.5f;
                Projectile.ai[1] = 0;

                Projectile.rotation = player.GetModPlayer<CrusoSwordPlayer>().UpSwing ? startPointUpRot : startPointRot;
                if (poweredSwing)
                    Projectile.rotation = startPointPoweredRot;
                if (poweredSwing && upSwing)
                    Projectile.rotation = -startPointPoweredRot;

                attackSpeed = player.GetAttackSpeed(DamageClass.Melee) * 1.1f;
            }

            public override void OnHitNPC(NPC target, int damage, float knockback, bool crit)
            {
                Player player = Main.player[Projectile.owner];
                hitCount = player.GetModPlayer<CrusoSwordPlayer>().hitCount++;

                if (hitCount % 5 == 0)
                    poweredSwing = true;

                if (hitCount % 6 == 0)
                    hitCount = 0;
            }

            public override Color? GetAlpha(Color lightColor)
            {
                if (poweredSwing)
                {
                    return new Color(0, 255, 100, 70);
                }

                return null;
            }

            public override void AI()
            {
                Player player = Main.player[Projectile.owner];

                Vector2 ownerMountedCenter = player.RotatedRelativePoint(player.MountedCenter, true);
                Projectile.direction = player.direction;
                player.heldProj = Projectile.whoAmI;
                player.itemTime = 2;
                player.itemAnimation = 2;
                Projectile.Center = ownerMountedCenter;
                player.ChangeDir(Projectile.direction);
                Projectile.spriteDirection = Projectile.direction;

                Projectile.ai[1] += 0.05f;
                if (Projectile.ai[1] >= maxTime)
                    Projectile.Kill();

                if (player.GetModPlayer<CrusoSwordPlayer>().UpSwing)
                    upSwing = true;

                if (poweredSwing)
                {
                    if ((player.direction == 1 && !upSwing) || player.direction == -1 && upSwing)
                        Projectile.rotation += swingSpeed;
                    if ((player.direction == -1 && !upSwing) || player.direction == 1 && upSwing)
                        Projectile.rotation -= swingSpeed;

                    swingSpeed = EaseFunctions.easeInOutQuad(Projectile.ai[1]) / 3.5f * attackSpeed;
                    Projectile.damage *= 2;
                }

                if (!poweredSwing)
                {
                    if ((player.direction == 1 && !upSwing) || player.direction == -1 && upSwing)
                        Projectile.rotation += swingSpeed;
                    if ((player.direction == -1 && !upSwing) || player.direction == 1 && upSwing)
                        Projectile.rotation -= swingSpeed;

                    if (!upSwing)
                        swingSpeed = Easing(Projectile.ai[1]) / 4 * attackSpeed;
                    else
                        swingSpeed = Easing2(Projectile.ai[1]) / 5 * attackSpeed;
                }

                Projectile.scale = upSwing
                    ? MathHelper.Lerp(1.2f, 0.8f, (float) Math.Sin(Projectile.ai[1]) - 0.2f)
                    : MathHelper.Lerp(0.8f, 1.2f, (float) Math.Sin(Projectile.ai[1]) - 0.2f);
                Vector2 pos = Projectile.Center + rotationFactor.ToRotationVector2() * 10;
                Projectile.Center = pos;

                if (player.direction == 1)
                    player.SetCompositeArmFront(true, Player.CompositeArmStretchAmount.Full,
                        Projectile.rotation + MathHelper.Pi + PiOver8);
                else
                    player.SetCompositeArmFront(true, Player.CompositeArmStretchAmount.Full,
                        Projectile.rotation + MathHelper.Pi - MathHelper.PiOver4);
            }

            public float Easing(float x) =>
                (float) (x == 0 ? 0 :
                    x == 1 ? 1 :
                    x < 0.5 ? Math.Pow(2, 20 * x - 10) / 2 : (2 - Math.Pow(2, -20 * x + 10)) / 2
                ); // some random easing functions i found online

            public float Easing2(float x) => (float) (1 - Math.Pow(1 - x, 4));

            public override bool? Colliding(Rectangle projHitbox, Rectangle targetHitbox)
            {
                Player player = Main.player[Projectile.owner];
                rotationFactor = player.direction == 1
                    ? Projectile.rotation - PiOver6
                    : Projectile.rotation + MathHelper.Pi + PiOver6;
                float scaleFactor = 63f;
                float widthMultiplier = 20f;
                float collisionPoint = 0f;

                Vector2 hitLineEnd = Projectile.Center + rotationFactor.ToRotationVector2() * scaleFactor;

                if (Collision.CheckAABBvLineCollision(targetHitbox.TopLeft(), targetHitbox.Size(), Projectile.Center,
                    hitLineEnd, widthMultiplier * Projectile.scale, ref collisionPoint))
                {
                    return true;
                }

                return false;
            }

            public override bool PreDraw(ref Color lightColor)
            {
                Player player = Main.player[Projectile.owner];

                SpriteEffects spriteEffects = SpriteEffects.None;
                if (Projectile.spriteDirection == -1)
                    spriteEffects = SpriteEffects.FlipHorizontally;

                Texture2D texture = (Texture2D) ModContent.Request<Texture2D>(Texture);

                int frameHeight = texture.Height / Main.projFrames[Projectile.type];
                int startY = frameHeight * Projectile.frame;

                Rectangle sourceRectangle = new Rectangle(0, startY, texture.Width, frameHeight);

                Vector2 origin = sourceRectangle.Size() / 2f;

                float offsetX = player.direction == 1 ? 45 : 55;
                origin.X = Projectile.spriteDirection == 1 ? sourceRectangle.Width - offsetX : offsetX;

                float offsetY = player.direction == 1 ? 10 : 55;
                origin.Y = Projectile.spriteDirection == 1 ? sourceRectangle.Height - offsetY : offsetY;

                Color drawColor = Projectile.GetAlpha(lightColor);
                Main.EntitySpriteDraw(texture,
                    Projectile.Center - Main.screenPosition + new Vector2(0f, Projectile.gfxOffY),
                    sourceRectangle, drawColor, Projectile.rotation, origin, Projectile.scale, spriteEffects, 0);

                return false;
            }
        }

        public class CrusoSwordPlayer : Terraria.ModLoader.ModPlayer
        {
            public bool UpSwing = false;
            public int hitCount = 0;

            public override void ResetEffects()
            {
                UpSwing = false;
            }
        }

        class Bealux : ModBuff
        {
            public override void SetStaticDefaults()
            {
                // DisplayName.SetDefault("Bealux!");
                // Description.SetDefault("Gives you the Energy of the Light");
            }

            public override void Update(Player player, ref int buffIndex)
            {
                player.runAcceleration += 0.75f;
                player.runSlowdown += 2.5f;
                player.GetAttackSpeed(DamageClass.Melee) += 0.5f;
                player.maxRunSpeed += 2.5f;
                player.endurance += 0.10f;
                player.aggro += 5;
                player.GetArmorPenetration(DamageClass.Melee) += 0.10f;
                Dust.NewDust(player.position, player.width, player.height, 269, -player.velocity.X);
            }
        }
    }
}